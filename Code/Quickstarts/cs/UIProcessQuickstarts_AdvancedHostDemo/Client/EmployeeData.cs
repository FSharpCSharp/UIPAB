//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Client {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class EmployeeData : DataSet {
        
        private PersonDataTable tablePerson;
        
        private AddressDataTable tableAddress;
        
        private PersonAddressDataTable tablePersonAddress;
        
        private PhoneDataTable tablePhone;
        
        private DataRelation relationPersonPersonAddress;
        
        private DataRelation relationAddressPersonAddress;
        
        private DataRelation relationPersonPhone;
        
        public EmployeeData() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected EmployeeData(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Person"] != null)) {
                    this.Tables.Add(new PersonDataTable(ds.Tables["Person"]));
                }
                if ((ds.Tables["Address"] != null)) {
                    this.Tables.Add(new AddressDataTable(ds.Tables["Address"]));
                }
                if ((ds.Tables["PersonAddress"] != null)) {
                    this.Tables.Add(new PersonAddressDataTable(ds.Tables["PersonAddress"]));
                }
                if ((ds.Tables["Phone"] != null)) {
                    this.Tables.Add(new PhoneDataTable(ds.Tables["Phone"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PersonDataTable Person {
            get {
                return this.tablePerson;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AddressDataTable Address {
            get {
                return this.tableAddress;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PersonAddressDataTable PersonAddress {
            get {
                return this.tablePersonAddress;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PhoneDataTable Phone {
            get {
                return this.tablePhone;
            }
        }
        
        public override DataSet Clone() {
            EmployeeData cln = ((EmployeeData)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Person"] != null)) {
                this.Tables.Add(new PersonDataTable(ds.Tables["Person"]));
            }
            if ((ds.Tables["Address"] != null)) {
                this.Tables.Add(new AddressDataTable(ds.Tables["Address"]));
            }
            if ((ds.Tables["PersonAddress"] != null)) {
                this.Tables.Add(new PersonAddressDataTable(ds.Tables["PersonAddress"]));
            }
            if ((ds.Tables["Phone"] != null)) {
                this.Tables.Add(new PhoneDataTable(ds.Tables["Phone"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablePerson = ((PersonDataTable)(this.Tables["Person"]));
            if ((this.tablePerson != null)) {
                this.tablePerson.InitVars();
            }
            this.tableAddress = ((AddressDataTable)(this.Tables["Address"]));
            if ((this.tableAddress != null)) {
                this.tableAddress.InitVars();
            }
            this.tablePersonAddress = ((PersonAddressDataTable)(this.Tables["PersonAddress"]));
            if ((this.tablePersonAddress != null)) {
                this.tablePersonAddress.InitVars();
            }
            this.tablePhone = ((PhoneDataTable)(this.Tables["Phone"]));
            if ((this.tablePhone != null)) {
                this.tablePhone.InitVars();
            }
            this.relationPersonPersonAddress = this.Relations["PersonPersonAddress"];
            this.relationAddressPersonAddress = this.Relations["AddressPersonAddress"];
            this.relationPersonPhone = this.Relations["PersonPhone"];
        }
        
        private void InitClass() {
            this.DataSetName = "EmployeeData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/EmployeeData.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablePerson = new PersonDataTable();
            this.Tables.Add(this.tablePerson);
            this.tableAddress = new AddressDataTable();
            this.Tables.Add(this.tableAddress);
            this.tablePersonAddress = new PersonAddressDataTable();
            this.Tables.Add(this.tablePersonAddress);
            this.tablePhone = new PhoneDataTable();
            this.Tables.Add(this.tablePhone);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("PersonPersonAddress", new DataColumn[] {
                        this.tablePerson.IdColumn}, new DataColumn[] {
                        this.tablePersonAddress.PersonIdColumn});
            this.tablePersonAddress.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("AddressPersonAddress", new DataColumn[] {
                        this.tableAddress.IdColumn}, new DataColumn[] {
                        this.tablePersonAddress.AddressIdColumn});
            this.tablePersonAddress.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("PersonPhone", new DataColumn[] {
                        this.tablePerson.IdColumn}, new DataColumn[] {
                        this.tablePhone.PersonIdColumn});
            this.tablePhone.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationPersonPersonAddress = new DataRelation("PersonPersonAddress", new DataColumn[] {
                        this.tablePerson.IdColumn}, new DataColumn[] {
                        this.tablePersonAddress.PersonIdColumn}, false);
            this.Relations.Add(this.relationPersonPersonAddress);
            this.relationAddressPersonAddress = new DataRelation("AddressPersonAddress", new DataColumn[] {
                        this.tableAddress.IdColumn}, new DataColumn[] {
                        this.tablePersonAddress.AddressIdColumn}, false);
            this.Relations.Add(this.relationAddressPersonAddress);
            this.relationPersonPhone = new DataRelation("PersonPhone", new DataColumn[] {
                        this.tablePerson.IdColumn}, new DataColumn[] {
                        this.tablePhone.PersonIdColumn}, false);
            this.Relations.Add(this.relationPersonPhone);
        }
        
        private bool ShouldSerializePerson() {
            return false;
        }
        
        private bool ShouldSerializeAddress() {
            return false;
        }
        
        private bool ShouldSerializePersonAddress() {
            return false;
        }
        
        private bool ShouldSerializePhone() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void PersonRowChangeEventHandler(object sender, PersonRowChangeEvent e);
        
        public delegate void AddressRowChangeEventHandler(object sender, AddressRowChangeEvent e);
        
        public delegate void PersonAddressRowChangeEventHandler(object sender, PersonAddressRowChangeEvent e);
        
        public delegate void PhoneRowChangeEventHandler(object sender, PhoneRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PersonDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnFirstName;
            
            private DataColumn columnLastName;
            
            internal PersonDataTable() : 
                    base("Person") {
                this.InitClass();
            }
            
            internal PersonDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            internal DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            public PersonRow this[int index] {
                get {
                    return ((PersonRow)(this.Rows[index]));
                }
            }
            
            public event PersonRowChangeEventHandler PersonRowChanged;
            
            public event PersonRowChangeEventHandler PersonRowChanging;
            
            public event PersonRowChangeEventHandler PersonRowDeleted;
            
            public event PersonRowChangeEventHandler PersonRowDeleting;
            
            public void AddPersonRow(PersonRow row) {
                this.Rows.Add(row);
            }
            
            public PersonRow AddPersonRow(long Id, string FirstName, string LastName) {
                PersonRow rowPersonRow = ((PersonRow)(this.NewRow()));
                rowPersonRow.ItemArray = new object[] {
                        Id,
                        FirstName,
                        LastName};
                this.Rows.Add(rowPersonRow);
                return rowPersonRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PersonDataTable cln = ((PersonDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PersonDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["Id"];
                this.columnFirstName = this.Columns["FirstName"];
                this.columnLastName = this.Columns["LastName"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnFirstName = new DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstName);
                this.columnLastName = new DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastName);
                this.Constraints.Add(new UniqueConstraint("PersonId", new DataColumn[] {
                                this.columnId}, false));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
            }
            
            public PersonRow NewPersonRow() {
                return ((PersonRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PersonRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PersonRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PersonRowChanged != null)) {
                    this.PersonRowChanged(this, new PersonRowChangeEvent(((PersonRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PersonRowChanging != null)) {
                    this.PersonRowChanging(this, new PersonRowChangeEvent(((PersonRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PersonRowDeleted != null)) {
                    this.PersonRowDeleted(this, new PersonRowChangeEvent(((PersonRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PersonRowDeleting != null)) {
                    this.PersonRowDeleting(this, new PersonRowChangeEvent(((PersonRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePersonRow(PersonRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PersonRow : DataRow {
            
            private PersonDataTable tablePerson;
            
            internal PersonRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePerson = ((PersonDataTable)(this.Table));
            }
            
            public long Id {
                get {
                    return ((long)(this[this.tablePerson.IdColumn]));
                }
                set {
                    this[this.tablePerson.IdColumn] = value;
                }
            }
            
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tablePerson.FirstNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.FirstNameColumn] = value;
                }
            }
            
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tablePerson.LastNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePerson.LastNameColumn] = value;
                }
            }
            
            public bool IsFirstNameNull() {
                return this.IsNull(this.tablePerson.FirstNameColumn);
            }
            
            public void SetFirstNameNull() {
                this[this.tablePerson.FirstNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastNameNull() {
                return this.IsNull(this.tablePerson.LastNameColumn);
            }
            
            public void SetLastNameNull() {
                this[this.tablePerson.LastNameColumn] = System.Convert.DBNull;
            }
            
            public PersonAddressRow[] GetPersonAddressRows() {
                return ((PersonAddressRow[])(this.GetChildRows(this.Table.ChildRelations["PersonPersonAddress"])));
            }
            
            public PhoneRow[] GetPhoneRows() {
                return ((PhoneRow[])(this.GetChildRows(this.Table.ChildRelations["PersonPhone"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PersonRowChangeEvent : EventArgs {
            
            private PersonRow eventRow;
            
            private DataRowAction eventAction;
            
            public PersonRowChangeEvent(PersonRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PersonRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnStreet;
            
            private DataColumn columnCity;
            
            private DataColumn columnState;
            
            private DataColumn columnZip;
            
            internal AddressDataTable() : 
                    base("Address") {
                this.InitClass();
            }
            
            internal AddressDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn StreetColumn {
                get {
                    return this.columnStreet;
                }
            }
            
            internal DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            internal DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            public AddressRow this[int index] {
                get {
                    return ((AddressRow)(this.Rows[index]));
                }
            }
            
            public event AddressRowChangeEventHandler AddressRowChanged;
            
            public event AddressRowChangeEventHandler AddressRowChanging;
            
            public event AddressRowChangeEventHandler AddressRowDeleted;
            
            public event AddressRowChangeEventHandler AddressRowDeleting;
            
            public void AddAddressRow(AddressRow row) {
                this.Rows.Add(row);
            }
            
            public AddressRow AddAddressRow(long Id, string Street, string City, string State, string Zip) {
                AddressRow rowAddressRow = ((AddressRow)(this.NewRow()));
                rowAddressRow.ItemArray = new object[] {
                        Id,
                        Street,
                        City,
                        State,
                        Zip};
                this.Rows.Add(rowAddressRow);
                return rowAddressRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AddressDataTable cln = ((AddressDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AddressDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["Id"];
                this.columnStreet = this.Columns["Street"];
                this.columnCity = this.Columns["City"];
                this.columnState = this.Columns["State"];
                this.columnZip = this.Columns["Zip"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnStreet = new DataColumn("Street", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStreet);
                this.columnCity = new DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCity);
                this.columnState = new DataColumn("State", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnState);
                this.columnZip = new DataColumn("Zip", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnZip);
                this.Constraints.Add(new UniqueConstraint("AddressId", new DataColumn[] {
                                this.columnId}, false));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
            }
            
            public AddressRow NewAddressRow() {
                return ((AddressRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AddressRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AddressRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AddressRowChanged != null)) {
                    this.AddressRowChanged(this, new AddressRowChangeEvent(((AddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AddressRowChanging != null)) {
                    this.AddressRowChanging(this, new AddressRowChangeEvent(((AddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AddressRowDeleted != null)) {
                    this.AddressRowDeleted(this, new AddressRowChangeEvent(((AddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AddressRowDeleting != null)) {
                    this.AddressRowDeleting(this, new AddressRowChangeEvent(((AddressRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAddressRow(AddressRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressRow : DataRow {
            
            private AddressDataTable tableAddress;
            
            internal AddressRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAddress = ((AddressDataTable)(this.Table));
            }
            
            public long Id {
                get {
                    return ((long)(this[this.tableAddress.IdColumn]));
                }
                set {
                    this[this.tableAddress.IdColumn] = value;
                }
            }
            
            public string Street {
                get {
                    try {
                        return ((string)(this[this.tableAddress.StreetColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.StreetColumn] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableAddress.CityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.CityColumn] = value;
                }
            }
            
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableAddress.StateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.StateColumn] = value;
                }
            }
            
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableAddress.ZipColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddress.ZipColumn] = value;
                }
            }
            
            public bool IsStreetNull() {
                return this.IsNull(this.tableAddress.StreetColumn);
            }
            
            public void SetStreetNull() {
                this[this.tableAddress.StreetColumn] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableAddress.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableAddress.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsStateNull() {
                return this.IsNull(this.tableAddress.StateColumn);
            }
            
            public void SetStateNull() {
                this[this.tableAddress.StateColumn] = System.Convert.DBNull;
            }
            
            public bool IsZipNull() {
                return this.IsNull(this.tableAddress.ZipColumn);
            }
            
            public void SetZipNull() {
                this[this.tableAddress.ZipColumn] = System.Convert.DBNull;
            }
            
            public PersonAddressRow[] GetPersonAddressRows() {
                return ((PersonAddressRow[])(this.GetChildRows(this.Table.ChildRelations["AddressPersonAddress"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AddressRowChangeEvent : EventArgs {
            
            private AddressRow eventRow;
            
            private DataRowAction eventAction;
            
            public AddressRowChangeEvent(AddressRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AddressRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PersonAddressDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnType;
            
            private DataColumn columnPersonId;
            
            private DataColumn columnAddressId;
            
            internal PersonAddressDataTable() : 
                    base("PersonAddress") {
                this.InitClass();
            }
            
            internal PersonAddressDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            internal DataColumn PersonIdColumn {
                get {
                    return this.columnPersonId;
                }
            }
            
            internal DataColumn AddressIdColumn {
                get {
                    return this.columnAddressId;
                }
            }
            
            public PersonAddressRow this[int index] {
                get {
                    return ((PersonAddressRow)(this.Rows[index]));
                }
            }
            
            public event PersonAddressRowChangeEventHandler PersonAddressRowChanged;
            
            public event PersonAddressRowChangeEventHandler PersonAddressRowChanging;
            
            public event PersonAddressRowChangeEventHandler PersonAddressRowDeleted;
            
            public event PersonAddressRowChangeEventHandler PersonAddressRowDeleting;
            
            public void AddPersonAddressRow(PersonAddressRow row) {
                this.Rows.Add(row);
            }
            
            public PersonAddressRow AddPersonAddressRow(string Type, PersonRow parentPersonRowByPersonPersonAddress, AddressRow parentAddressRowByAddressPersonAddress) {
                PersonAddressRow rowPersonAddressRow = ((PersonAddressRow)(this.NewRow()));
                rowPersonAddressRow.ItemArray = new object[] {
                        Type,
                        parentPersonRowByPersonPersonAddress[0],
                        parentAddressRowByAddressPersonAddress[0]};
                this.Rows.Add(rowPersonAddressRow);
                return rowPersonAddressRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PersonAddressDataTable cln = ((PersonAddressDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PersonAddressDataTable();
            }
            
            internal void InitVars() {
                this.columnType = this.Columns["Type"];
                this.columnPersonId = this.Columns["PersonId"];
                this.columnAddressId = this.Columns["AddressId"];
            }
            
            private void InitClass() {
                this.columnType = new DataColumn("Type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnType);
                this.columnPersonId = new DataColumn("PersonId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPersonId);
                this.columnAddressId = new DataColumn("AddressId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAddressId);
            }
            
            public PersonAddressRow NewPersonAddressRow() {
                return ((PersonAddressRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PersonAddressRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PersonAddressRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PersonAddressRowChanged != null)) {
                    this.PersonAddressRowChanged(this, new PersonAddressRowChangeEvent(((PersonAddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PersonAddressRowChanging != null)) {
                    this.PersonAddressRowChanging(this, new PersonAddressRowChangeEvent(((PersonAddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PersonAddressRowDeleted != null)) {
                    this.PersonAddressRowDeleted(this, new PersonAddressRowChangeEvent(((PersonAddressRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PersonAddressRowDeleting != null)) {
                    this.PersonAddressRowDeleting(this, new PersonAddressRowChangeEvent(((PersonAddressRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePersonAddressRow(PersonAddressRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PersonAddressRow : DataRow {
            
            private PersonAddressDataTable tablePersonAddress;
            
            internal PersonAddressRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePersonAddress = ((PersonAddressDataTable)(this.Table));
            }
            
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tablePersonAddress.TypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePersonAddress.TypeColumn] = value;
                }
            }
            
            public long PersonId {
                get {
                    try {
                        return ((long)(this[this.tablePersonAddress.PersonIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePersonAddress.PersonIdColumn] = value;
                }
            }
            
            public long AddressId {
                get {
                    try {
                        return ((long)(this[this.tablePersonAddress.AddressIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePersonAddress.AddressIdColumn] = value;
                }
            }
            
            public PersonRow PersonRow {
                get {
                    return ((PersonRow)(this.GetParentRow(this.Table.ParentRelations["PersonPersonAddress"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PersonPersonAddress"]);
                }
            }
            
            public AddressRow AddressRow {
                get {
                    return ((AddressRow)(this.GetParentRow(this.Table.ParentRelations["AddressPersonAddress"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AddressPersonAddress"]);
                }
            }
            
            public bool IsTypeNull() {
                return this.IsNull(this.tablePersonAddress.TypeColumn);
            }
            
            public void SetTypeNull() {
                this[this.tablePersonAddress.TypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsPersonIdNull() {
                return this.IsNull(this.tablePersonAddress.PersonIdColumn);
            }
            
            public void SetPersonIdNull() {
                this[this.tablePersonAddress.PersonIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressIdNull() {
                return this.IsNull(this.tablePersonAddress.AddressIdColumn);
            }
            
            public void SetAddressIdNull() {
                this[this.tablePersonAddress.AddressIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PersonAddressRowChangeEvent : EventArgs {
            
            private PersonAddressRow eventRow;
            
            private DataRowAction eventAction;
            
            public PersonAddressRowChangeEvent(PersonAddressRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PersonAddressRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PhoneDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPersonId;
            
            private DataColumn columnAreaCode;
            
            private DataColumn columnPhoneNumber;
            
            internal PhoneDataTable() : 
                    base("Phone") {
                this.InitClass();
            }
            
            internal PhoneDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PersonIdColumn {
                get {
                    return this.columnPersonId;
                }
            }
            
            internal DataColumn AreaCodeColumn {
                get {
                    return this.columnAreaCode;
                }
            }
            
            internal DataColumn PhoneNumberColumn {
                get {
                    return this.columnPhoneNumber;
                }
            }
            
            public PhoneRow this[int index] {
                get {
                    return ((PhoneRow)(this.Rows[index]));
                }
            }
            
            public event PhoneRowChangeEventHandler PhoneRowChanged;
            
            public event PhoneRowChangeEventHandler PhoneRowChanging;
            
            public event PhoneRowChangeEventHandler PhoneRowDeleted;
            
            public event PhoneRowChangeEventHandler PhoneRowDeleting;
            
            public void AddPhoneRow(PhoneRow row) {
                this.Rows.Add(row);
            }
            
            public PhoneRow AddPhoneRow(PersonRow parentPersonRowByPersonPhone, string AreaCode, string PhoneNumber) {
                PhoneRow rowPhoneRow = ((PhoneRow)(this.NewRow()));
                rowPhoneRow.ItemArray = new object[] {
                        parentPersonRowByPersonPhone[0],
                        AreaCode,
                        PhoneNumber};
                this.Rows.Add(rowPhoneRow);
                return rowPhoneRow;
            }
            
            public PhoneRow FindByPersonId(long PersonId) {
                return ((PhoneRow)(this.Rows.Find(new object[] {
                            PersonId})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PhoneDataTable cln = ((PhoneDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PhoneDataTable();
            }
            
            internal void InitVars() {
                this.columnPersonId = this.Columns["PersonId"];
                this.columnAreaCode = this.Columns["AreaCode"];
                this.columnPhoneNumber = this.Columns["PhoneNumber"];
            }
            
            private void InitClass() {
                this.columnPersonId = new DataColumn("PersonId", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPersonId);
                this.columnAreaCode = new DataColumn("AreaCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAreaCode);
                this.columnPhoneNumber = new DataColumn("PhoneNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhoneNumber);
                this.Constraints.Add(new UniqueConstraint("PhoneKey", new DataColumn[] {
                                this.columnPersonId}, true));
                this.columnPersonId.AllowDBNull = false;
                this.columnPersonId.Unique = true;
            }
            
            public PhoneRow NewPhoneRow() {
                return ((PhoneRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PhoneRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PhoneRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PhoneRowChanged != null)) {
                    this.PhoneRowChanged(this, new PhoneRowChangeEvent(((PhoneRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PhoneRowChanging != null)) {
                    this.PhoneRowChanging(this, new PhoneRowChangeEvent(((PhoneRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PhoneRowDeleted != null)) {
                    this.PhoneRowDeleted(this, new PhoneRowChangeEvent(((PhoneRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PhoneRowDeleting != null)) {
                    this.PhoneRowDeleting(this, new PhoneRowChangeEvent(((PhoneRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePhoneRow(PhoneRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PhoneRow : DataRow {
            
            private PhoneDataTable tablePhone;
            
            internal PhoneRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePhone = ((PhoneDataTable)(this.Table));
            }
            
            public long PersonId {
                get {
                    return ((long)(this[this.tablePhone.PersonIdColumn]));
                }
                set {
                    this[this.tablePhone.PersonIdColumn] = value;
                }
            }
            
            public string AreaCode {
                get {
                    try {
                        return ((string)(this[this.tablePhone.AreaCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePhone.AreaCodeColumn] = value;
                }
            }
            
            public string PhoneNumber {
                get {
                    try {
                        return ((string)(this[this.tablePhone.PhoneNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePhone.PhoneNumberColumn] = value;
                }
            }
            
            public PersonRow PersonRow {
                get {
                    return ((PersonRow)(this.GetParentRow(this.Table.ParentRelations["PersonPhone"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PersonPhone"]);
                }
            }
            
            public bool IsAreaCodeNull() {
                return this.IsNull(this.tablePhone.AreaCodeColumn);
            }
            
            public void SetAreaCodeNull() {
                this[this.tablePhone.AreaCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNumberNull() {
                return this.IsNull(this.tablePhone.PhoneNumberColumn);
            }
            
            public void SetPhoneNumberNull() {
                this[this.tablePhone.PhoneNumberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PhoneRowChangeEvent : EventArgs {
            
            private PhoneRow eventRow;
            
            private DataRowAction eventAction;
            
            public PhoneRowChangeEvent(PhoneRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PhoneRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
