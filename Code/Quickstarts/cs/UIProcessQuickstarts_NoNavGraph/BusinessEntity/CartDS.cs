//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace UIProcessQuickstarts_Store {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class CartDS : DataSet {
        
        private CartsDataTable tableCarts;
        
        private CartItemsDataTable tableCartItems;
        
        public CartDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected CartDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["cart"] != null)) {
                    this.Tables.Add(new CartsDataTable(ds.Tables["cart"]));
                }
                if ((ds.Tables["cart_details"] != null)) {
                    this.Tables.Add(new CartItemsDataTable(ds.Tables["cart_details"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CartsDataTable Carts {
            get {
                return this.tableCarts;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CartItemsDataTable CartItems {
            get {
                return this.tableCartItems;
            }
        }
        
        public override DataSet Clone() {
            CartDS cln = ((CartDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["cart"] != null)) {
                this.Tables.Add(new CartsDataTable(ds.Tables["cart"]));
            }
            if ((ds.Tables["cart_details"] != null)) {
                this.Tables.Add(new CartItemsDataTable(ds.Tables["cart_details"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableCarts = ((CartsDataTable)(this.Tables["cart"]));
            if ((this.tableCarts != null)) {
                this.tableCarts.InitVars();
            }
            this.tableCartItems = ((CartItemsDataTable)(this.Tables["cart_details"]));
            if ((this.tableCartItems != null)) {
                this.tableCartItems.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "CartDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/CartDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableCarts = new CartsDataTable();
            this.Tables.Add(this.tableCarts);
            this.tableCartItems = new CartItemsDataTable();
            this.Tables.Add(this.tableCartItems);
        }
        
        private bool ShouldSerializeCarts() {
            return false;
        }
        
        private bool ShouldSerializeCartItems() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void CartChangeEventHandler(object sender, CartChangeEvent e);
        
        public delegate void CartItemChangeEventHandler(object sender, CartItemChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CartsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCustomerId;
            
            private DataColumn columnTaskId;
            
            internal CartsDataTable() : 
                    base("cart") {
                this.InitClass();
            }
            
            internal CartsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CustomerIdColumn {
                get {
                    return this.columnCustomerId;
                }
            }
            
            internal DataColumn TaskIdColumn {
                get {
                    return this.columnTaskId;
                }
            }
            
            public Cart this[int index] {
                get {
                    return ((Cart)(this.Rows[index]));
                }
            }
            
            public event CartChangeEventHandler CartChanged;
            
            public event CartChangeEventHandler CartChanging;
            
            public event CartChangeEventHandler CartDeleted;
            
            public event CartChangeEventHandler CartDeleting;
            
            public void AddCart(Cart row) {
                this.Rows.Add(row);
            }
            
            public Cart AddCart(int CustomerId, System.Guid TaskId) {
                Cart rowCart = ((Cart)(this.NewRow()));
                rowCart.ItemArray = new object[] {
                        CustomerId,
                        TaskId};
                this.Rows.Add(rowCart);
                return rowCart;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CartsDataTable cln = ((CartsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CartsDataTable();
            }
            
            internal void InitVars() {
                this.columnCustomerId = this.Columns["CustomerID"];
                this.columnTaskId = this.Columns["TaskID"];
            }
            
            private void InitClass() {
                this.columnCustomerId = new DataColumn("CustomerID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCustomerId);
                this.columnTaskId = new DataColumn("TaskID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTaskId);
                this.columnCustomerId.AllowDBNull = false;
                this.columnTaskId.AllowDBNull = false;
            }
            
            public Cart NewCart() {
                return ((Cart)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Cart(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Cart);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CartChanged != null)) {
                    this.CartChanged(this, new CartChangeEvent(((Cart)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CartChanging != null)) {
                    this.CartChanging(this, new CartChangeEvent(((Cart)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CartDeleted != null)) {
                    this.CartDeleted(this, new CartChangeEvent(((Cart)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CartDeleting != null)) {
                    this.CartDeleting(this, new CartChangeEvent(((Cart)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCart(Cart row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Cart : DataRow {
            
            private CartsDataTable tableCarts;
            
            internal Cart(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCarts = ((CartsDataTable)(this.Table));
            }
            
            public int CustomerId {
                get {
                    return ((int)(this[this.tableCarts.CustomerIdColumn]));
                }
                set {
                    this[this.tableCarts.CustomerIdColumn] = value;
                }
            }
            
            public System.Guid TaskId {
                get {
                    return ((System.Guid)(this[this.tableCarts.TaskIdColumn]));
                }
                set {
                    this[this.tableCarts.TaskIdColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CartChangeEvent : EventArgs {
            
            private Cart eventRow;
            
            private DataRowAction eventAction;
            
            public CartChangeEvent(Cart row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Cart Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CartItemsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnQuantity;
            
            private DataColumn columnProductId;
            
            private DataColumn columnModelName;
            
            private DataColumn columnUnitCost;
            
            internal CartItemsDataTable() : 
                    base("cart_details") {
                this.InitClass();
            }
            
            internal CartItemsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            internal DataColumn ProductIdColumn {
                get {
                    return this.columnProductId;
                }
            }
            
            internal DataColumn ModelNameColumn {
                get {
                    return this.columnModelName;
                }
            }
            
            internal DataColumn UnitCostColumn {
                get {
                    return this.columnUnitCost;
                }
            }
            
            public CartItem this[int index] {
                get {
                    return ((CartItem)(this.Rows[index]));
                }
            }
            
            public event CartItemChangeEventHandler CartItemChanged;
            
            public event CartItemChangeEventHandler CartItemChanging;
            
            public event CartItemChangeEventHandler CartItemDeleted;
            
            public event CartItemChangeEventHandler CartItemDeleting;
            
            public void AddCartItem(CartItem row) {
                this.Rows.Add(row);
            }
            
            public CartItem AddCartItem(int Quantity, int ProductId, string ModelName, System.Decimal UnitCost) {
                CartItem rowCartItem = ((CartItem)(this.NewRow()));
                rowCartItem.ItemArray = new object[] {
                        Quantity,
                        ProductId,
                        ModelName,
                        UnitCost};
                this.Rows.Add(rowCartItem);
                return rowCartItem;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CartItemsDataTable cln = ((CartItemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CartItemsDataTable();
            }
            
            internal void InitVars() {
                this.columnQuantity = this.Columns["Quantity"];
                this.columnProductId = this.Columns["ProductID"];
                this.columnModelName = this.Columns["ModelName"];
                this.columnUnitCost = this.Columns["UnitCost"];
            }
            
            private void InitClass() {
                this.columnQuantity = new DataColumn("Quantity", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnQuantity);
                this.columnProductId = new DataColumn("ProductID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProductId);
                this.columnModelName = new DataColumn("ModelName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModelName);
                this.columnUnitCost = new DataColumn("UnitCost", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUnitCost);
                this.columnQuantity.AllowDBNull = false;
                this.columnProductId.AllowDBNull = false;
                this.columnModelName.AllowDBNull = false;
                this.columnUnitCost.AllowDBNull = false;
            }
            
            public CartItem NewCartItem() {
                return ((CartItem)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CartItem(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CartItem);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CartItemChanged != null)) {
                    this.CartItemChanged(this, new CartItemChangeEvent(((CartItem)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CartItemChanging != null)) {
                    this.CartItemChanging(this, new CartItemChangeEvent(((CartItem)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CartItemDeleted != null)) {
                    this.CartItemDeleted(this, new CartItemChangeEvent(((CartItem)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CartItemDeleting != null)) {
                    this.CartItemDeleting(this, new CartItemChangeEvent(((CartItem)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCartItem(CartItem row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CartItem : DataRow {
            
            private CartItemsDataTable tableCartItems;
            
            internal CartItem(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCartItems = ((CartItemsDataTable)(this.Table));
            }
            
            public int Quantity {
                get {
                    return ((int)(this[this.tableCartItems.QuantityColumn]));
                }
                set {
                    this[this.tableCartItems.QuantityColumn] = value;
                }
            }
            
            public int ProductId {
                get {
                    return ((int)(this[this.tableCartItems.ProductIdColumn]));
                }
                set {
                    this[this.tableCartItems.ProductIdColumn] = value;
                }
            }
            
            public string ModelName {
                get {
                    return ((string)(this[this.tableCartItems.ModelNameColumn]));
                }
                set {
                    this[this.tableCartItems.ModelNameColumn] = value;
                }
            }
            
            public System.Decimal UnitCost {
                get {
                    return ((System.Decimal)(this[this.tableCartItems.UnitCostColumn]));
                }
                set {
                    this[this.tableCartItems.UnitCostColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CartItemChangeEvent : EventArgs {
            
            private CartItem eventRow;
            
            private DataRowAction eventAction;
            
            public CartItemChangeEvent(CartItem row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CartItem Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
