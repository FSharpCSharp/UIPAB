//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace UIProcessQuickstarts_Store {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ProductDS : DataSet {
        
        private ProductsDataTable tableProducts;
        
        public ProductDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ProductDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["product"] != null)) {
                    this.Tables.Add(new ProductsDataTable(ds.Tables["product"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductsDataTable Products {
            get {
                return this.tableProducts;
            }
        }
        
        public override DataSet Clone() {
            ProductDS cln = ((ProductDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["product"] != null)) {
                this.Tables.Add(new ProductsDataTable(ds.Tables["product"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableProducts = ((ProductsDataTable)(this.Tables["product"]));
            if ((this.tableProducts != null)) {
                this.tableProducts.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ProductDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ProductDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableProducts = new ProductsDataTable();
            this.Tables.Add(this.tableProducts);
        }
        
        private bool ShouldSerializeProducts() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ProductChangeEventHandler(object sender, ProductChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProductsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnProductId;
            
            private DataColumn columnCategoryId;
            
            private DataColumn columnModelNumber;
            
            private DataColumn columnModelName;
            
            private DataColumn columnProductImage;
            
            private DataColumn columnUnitCost;
            
            private DataColumn columnDescription;
            
            internal ProductsDataTable() : 
                    base("product") {
                this.InitClass();
            }
            
            internal ProductsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ProductIdColumn {
                get {
                    return this.columnProductId;
                }
            }
            
            internal DataColumn CategoryIdColumn {
                get {
                    return this.columnCategoryId;
                }
            }
            
            internal DataColumn ModelNumberColumn {
                get {
                    return this.columnModelNumber;
                }
            }
            
            internal DataColumn ModelNameColumn {
                get {
                    return this.columnModelName;
                }
            }
            
            internal DataColumn ProductImageColumn {
                get {
                    return this.columnProductImage;
                }
            }
            
            internal DataColumn UnitCostColumn {
                get {
                    return this.columnUnitCost;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            public Product this[int index] {
                get {
                    return ((Product)(this.Rows[index]));
                }
            }
            
            public event ProductChangeEventHandler ProductChanged;
            
            public event ProductChangeEventHandler ProductChanging;
            
            public event ProductChangeEventHandler ProductDeleted;
            
            public event ProductChangeEventHandler ProductDeleting;
            
            public void AddProduct(Product row) {
                this.Rows.Add(row);
            }
            
            public Product AddProduct(int ProductId, int CategoryId, string ModelNumber, string ModelName, string ProductImage, System.Decimal UnitCost, string Description) {
                Product rowProduct = ((Product)(this.NewRow()));
                rowProduct.ItemArray = new object[] {
                        ProductId,
                        CategoryId,
                        ModelNumber,
                        ModelName,
                        ProductImage,
                        UnitCost,
                        Description};
                this.Rows.Add(rowProduct);
                return rowProduct;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProductsDataTable cln = ((ProductsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProductsDataTable();
            }
            
            internal void InitVars() {
                this.columnProductId = this.Columns["ProductID"];
                this.columnCategoryId = this.Columns["CategoryID"];
                this.columnModelNumber = this.Columns["ModelNumber"];
                this.columnModelName = this.Columns["ModelName"];
                this.columnProductImage = this.Columns["ProductImage"];
                this.columnUnitCost = this.Columns["UnitCost"];
                this.columnDescription = this.Columns["Description"];
            }
            
            private void InitClass() {
                this.columnProductId = new DataColumn("ProductID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProductId);
                this.columnCategoryId = new DataColumn("CategoryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCategoryId);
                this.columnModelNumber = new DataColumn("ModelNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModelNumber);
                this.columnModelName = new DataColumn("ModelName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModelName);
                this.columnProductImage = new DataColumn("ProductImage", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProductImage);
                this.columnUnitCost = new DataColumn("UnitCost", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUnitCost);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnProductId.AllowDBNull = false;
                this.columnCategoryId.AllowDBNull = false;
                this.columnModelNumber.AllowDBNull = false;
                this.columnModelName.AllowDBNull = false;
                this.columnProductImage.AllowDBNull = false;
                this.columnUnitCost.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
            }
            
            public Product NewProduct() {
                return ((Product)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Product(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Product);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductChanged != null)) {
                    this.ProductChanged(this, new ProductChangeEvent(((Product)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductChanging != null)) {
                    this.ProductChanging(this, new ProductChangeEvent(((Product)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductDeleted != null)) {
                    this.ProductDeleted(this, new ProductChangeEvent(((Product)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductDeleting != null)) {
                    this.ProductDeleting(this, new ProductChangeEvent(((Product)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProduct(Product row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Product : DataRow {
            
            private ProductsDataTable tableProducts;
            
            internal Product(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProducts = ((ProductsDataTable)(this.Table));
            }
            
            public int ProductId {
                get {
                    return ((int)(this[this.tableProducts.ProductIdColumn]));
                }
                set {
                    this[this.tableProducts.ProductIdColumn] = value;
                }
            }
            
            public int CategoryId {
                get {
                    return ((int)(this[this.tableProducts.CategoryIdColumn]));
                }
                set {
                    this[this.tableProducts.CategoryIdColumn] = value;
                }
            }
            
            public string ModelNumber {
                get {
                    return ((string)(this[this.tableProducts.ModelNumberColumn]));
                }
                set {
                    this[this.tableProducts.ModelNumberColumn] = value;
                }
            }
            
            public string ModelName {
                get {
                    return ((string)(this[this.tableProducts.ModelNameColumn]));
                }
                set {
                    this[this.tableProducts.ModelNameColumn] = value;
                }
            }
            
            public string ProductImage {
                get {
                    return ((string)(this[this.tableProducts.ProductImageColumn]));
                }
                set {
                    this[this.tableProducts.ProductImageColumn] = value;
                }
            }
            
            public System.Decimal UnitCost {
                get {
                    return ((System.Decimal)(this[this.tableProducts.UnitCostColumn]));
                }
                set {
                    this[this.tableProducts.UnitCostColumn] = value;
                }
            }
            
            public string Description {
                get {
                    return ((string)(this[this.tableProducts.DescriptionColumn]));
                }
                set {
                    this[this.tableProducts.DescriptionColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProductChangeEvent : EventArgs {
            
            private Product eventRow;
            
            private DataRowAction eventAction;
            
            public ProductChangeEvent(Product row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Product Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
