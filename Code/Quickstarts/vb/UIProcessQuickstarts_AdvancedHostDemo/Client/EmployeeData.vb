'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml

Namespace Client

    <Serializable(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Diagnostics.DebuggerStepThrough(), _
     System.ComponentModel.ToolboxItem(True)> _
    Public Class EmployeeData
        Inherits DataSet

        Private tablePerson As PersonDataTable

        Private tableAddress As AddressDataTable

        Private tablePersonAddress As PersonAddressDataTable

        Private tablePhone As PhoneDataTable

        Private relationPersonPersonAddress As DataRelation

        Private relationAddressPersonAddress As DataRelation

        Private relationPersonPhone As DataRelation

        Public Sub New()
            MyBase.New()
            Me.InitClass()
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub

        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
            MyBase.New()
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)), String)
            If (Not (strSchema) Is Nothing) Then
                Dim ds As DataSet = New DataSet
                ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("Person")) Is Nothing) Then
                    Me.Tables.Add(New PersonDataTable(ds.Tables("Person")))
                End If
                If (Not (ds.Tables("Address")) Is Nothing) Then
                    Me.Tables.Add(New AddressDataTable(ds.Tables("Address")))
                End If
                If (Not (ds.Tables("PersonAddress")) Is Nothing) Then
                    Me.Tables.Add(New PersonAddressDataTable(ds.Tables("PersonAddress")))
                End If
                If (Not (ds.Tables("Phone")) Is Nothing) Then
                    Me.Tables.Add(New PhoneDataTable(ds.Tables("Phone")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.InitClass()
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub

        <System.ComponentModel.Browsable(False), _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)> _
        Public ReadOnly Property Person() As PersonDataTable
            Get
                Return Me.tablePerson
            End Get
        End Property

        <System.ComponentModel.Browsable(False), _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)> _
        Public ReadOnly Property Address() As AddressDataTable
            Get
                Return Me.tableAddress
            End Get
        End Property

        <System.ComponentModel.Browsable(False), _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)> _
        Public ReadOnly Property PersonAddress() As PersonAddressDataTable
            Get
                Return Me.tablePersonAddress
            End Get
        End Property

        <System.ComponentModel.Browsable(False), _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)> _
        Public ReadOnly Property Phone() As PhoneDataTable
            Get
                Return Me.tablePhone
            End Get
        End Property

        Public Overrides Function Clone() As DataSet
            Dim cln As EmployeeData = CType(MyBase.Clone, EmployeeData)
            cln.InitVars()
            Return cln
        End Function

        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return False
        End Function

        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return False
        End Function

        Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
            Me.Reset()
            Dim ds As DataSet = New DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Person")) Is Nothing) Then
                Me.Tables.Add(New PersonDataTable(ds.Tables("Person")))
            End If
            If (Not (ds.Tables("Address")) Is Nothing) Then
                Me.Tables.Add(New AddressDataTable(ds.Tables("Address")))
            End If
            If (Not (ds.Tables("PersonAddress")) Is Nothing) Then
                Me.Tables.Add(New PersonAddressDataTable(ds.Tables("PersonAddress")))
            End If
            If (Not (ds.Tables("Phone")) Is Nothing) Then
                Me.Tables.Add(New PhoneDataTable(ds.Tables("Phone")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        End Sub

        Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
            Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
            Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
        End Function

        Friend Sub InitVars()
            Me.tablePerson = CType(Me.Tables("Person"), PersonDataTable)
            If (Not (Me.tablePerson) Is Nothing) Then
                Me.tablePerson.InitVars()
            End If
            Me.tableAddress = CType(Me.Tables("Address"), AddressDataTable)
            If (Not (Me.tableAddress) Is Nothing) Then
                Me.tableAddress.InitVars()
            End If
            Me.tablePersonAddress = CType(Me.Tables("PersonAddress"), PersonAddressDataTable)
            If (Not (Me.tablePersonAddress) Is Nothing) Then
                Me.tablePersonAddress.InitVars()
            End If
            Me.tablePhone = CType(Me.Tables("Phone"), PhoneDataTable)
            If (Not (Me.tablePhone) Is Nothing) Then
                Me.tablePhone.InitVars()
            End If
            Me.relationPersonPersonAddress = Me.Relations("PersonPersonAddress")
            Me.relationAddressPersonAddress = Me.Relations("AddressPersonAddress")
            Me.relationPersonPhone = Me.Relations("PersonPhone")
        End Sub

        Private Sub InitClass()
            Me.DataSetName = "EmployeeData"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/EmployeeData.xsd"
            Me.Locale = New System.Globalization.CultureInfo("en-US")
            Me.CaseSensitive = False
            Me.EnforceConstraints = True
            Me.tablePerson = New PersonDataTable
            Me.Tables.Add(Me.tablePerson)
            Me.tableAddress = New AddressDataTable
            Me.Tables.Add(Me.tableAddress)
            Me.tablePersonAddress = New PersonAddressDataTable
            Me.Tables.Add(Me.tablePersonAddress)
            Me.tablePhone = New PhoneDataTable
            Me.Tables.Add(Me.tablePhone)
            Dim fkc As ForeignKeyConstraint
            fkc = New ForeignKeyConstraint("PersonPersonAddress", New DataColumn() {Me.tablePerson.IdColumn}, New DataColumn() {Me.tablePersonAddress.PersonIdColumn})
            Me.tablePersonAddress.Constraints.Add(fkc)
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
            fkc.DeleteRule = System.Data.Rule.Cascade
            fkc.UpdateRule = System.Data.Rule.Cascade
            fkc = New ForeignKeyConstraint("AddressPersonAddress", New DataColumn() {Me.tableAddress.IdColumn}, New DataColumn() {Me.tablePersonAddress.AddressIdColumn})
            Me.tablePersonAddress.Constraints.Add(fkc)
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
            fkc.DeleteRule = System.Data.Rule.Cascade
            fkc.UpdateRule = System.Data.Rule.Cascade
            fkc = New ForeignKeyConstraint("PersonPhone", New DataColumn() {Me.tablePerson.IdColumn}, New DataColumn() {Me.tablePhone.PersonIdColumn})
            Me.tablePhone.Constraints.Add(fkc)
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
            fkc.DeleteRule = System.Data.Rule.Cascade
            fkc.UpdateRule = System.Data.Rule.Cascade
            Me.relationPersonPersonAddress = New DataRelation("PersonPersonAddress", New DataColumn() {Me.tablePerson.IdColumn}, New DataColumn() {Me.tablePersonAddress.PersonIdColumn}, False)
            Me.Relations.Add(Me.relationPersonPersonAddress)
            Me.relationAddressPersonAddress = New DataRelation("AddressPersonAddress", New DataColumn() {Me.tableAddress.IdColumn}, New DataColumn() {Me.tablePersonAddress.AddressIdColumn}, False)
            Me.Relations.Add(Me.relationAddressPersonAddress)
            Me.relationPersonPhone = New DataRelation("PersonPhone", New DataColumn() {Me.tablePerson.IdColumn}, New DataColumn() {Me.tablePhone.PersonIdColumn}, False)
            Me.Relations.Add(Me.relationPersonPhone)
        End Sub

        Private Function ShouldSerializePerson() As Boolean
            Return False
        End Function

        Private Function ShouldSerializeAddress() As Boolean
            Return False
        End Function

        Private Function ShouldSerializePersonAddress() As Boolean
            Return False
        End Function

        Private Function ShouldSerializePhone() As Boolean
            Return False
        End Function

        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars()
            End If
        End Sub

        Public Delegate Sub PersonRowChangeEventHandler(ByVal sender As Object, ByVal e As PersonRowChangeEvent)

        Public Delegate Sub AddressRowChangeEventHandler(ByVal sender As Object, ByVal e As AddressRowChangeEvent)

        Public Delegate Sub PersonAddressRowChangeEventHandler(ByVal sender As Object, ByVal e As PersonAddressRowChangeEvent)

        Public Delegate Sub PhoneRowChangeEventHandler(ByVal sender As Object, ByVal e As PhoneRowChangeEvent)

        <System.Diagnostics.DebuggerStepThrough()> _
        Public Class PersonDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable

            Private columnId As DataColumn

            Private columnFirstName As DataColumn

            Private columnLastName As DataColumn

            Friend Sub New()
                MyBase.New("Person")
                Me.InitClass()
            End Sub

            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub

            <System.ComponentModel.Browsable(False)> _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            Friend ReadOnly Property IdColumn() As DataColumn
                Get
                    Return Me.columnId
                End Get
            End Property

            Friend ReadOnly Property FirstNameColumn() As DataColumn
                Get
                    Return Me.columnFirstName
                End Get
            End Property

            Friend ReadOnly Property LastNameColumn() As DataColumn
                Get
                    Return Me.columnLastName
                End Get
            End Property

            Default Public ReadOnly Property Item(ByVal index As Integer) As PersonRow
                Get
                    Return CType(Me.Rows(index), PersonRow)
                End Get
            End Property

            Public Event PersonRowChanged As PersonRowChangeEventHandler

            Public Event PersonRowChanging As PersonRowChangeEventHandler

            Public Event PersonRowDeleted As PersonRowChangeEventHandler

            Public Event PersonRowDeleting As PersonRowChangeEventHandler

            Public Overloads Sub AddPersonRow(ByVal row As PersonRow)
                Me.Rows.Add(row)
            End Sub

            Public Overloads Function AddPersonRow(ByVal Id As Long, ByVal FirstName As String, ByVal LastName As String) As PersonRow
                Dim rowPersonRow As PersonRow = CType(Me.NewRow, PersonRow)
                rowPersonRow.ItemArray = New Object() {Id, FirstName, LastName}
                Me.Rows.Add(rowPersonRow)
                Return rowPersonRow
            End Function

            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function

            Public Overrides Function Clone() As DataTable
                Dim cln As PersonDataTable = CType(MyBase.Clone, PersonDataTable)
                cln.InitVars()
                Return cln
            End Function

            Protected Overrides Function CreateInstance() As DataTable
                Return New PersonDataTable
            End Function

            Friend Sub InitVars()
                Me.columnId = Me.Columns("Id")
                Me.columnFirstName = Me.Columns("FirstName")
                Me.columnLastName = Me.Columns("LastName")
            End Sub

            Private Sub InitClass()
                Me.columnId = New DataColumn("Id", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnId)
                Me.columnFirstName = New DataColumn("FirstName", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnFirstName)
                Me.columnLastName = New DataColumn("LastName", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnLastName)
                Me.Constraints.Add(New UniqueConstraint("PersonId", New DataColumn() {Me.columnId}, False))
                Me.columnId.AllowDBNull = False
                Me.columnId.Unique = True
            End Sub

            Public Function NewPersonRow() As PersonRow
                Return CType(Me.NewRow, PersonRow)
            End Function

            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New PersonRow(builder)
            End Function

            Protected Overrides Function GetRowType() As System.Type
                Return GetType(PersonRow)
            End Function

            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.PersonRowChangedEvent) Is Nothing) Then
                    RaiseEvent PersonRowChanged(Me, New PersonRowChangeEvent(CType(e.Row, PersonRow), e.Action))
                End If
            End Sub

            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.PersonRowChangingEvent) Is Nothing) Then
                    RaiseEvent PersonRowChanging(Me, New PersonRowChangeEvent(CType(e.Row, PersonRow), e.Action))
                End If
            End Sub

            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.PersonRowDeletedEvent) Is Nothing) Then
                    RaiseEvent PersonRowDeleted(Me, New PersonRowChangeEvent(CType(e.Row, PersonRow), e.Action))
                End If
            End Sub

            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.PersonRowDeletingEvent) Is Nothing) Then
                    RaiseEvent PersonRowDeleting(Me, New PersonRowChangeEvent(CType(e.Row, PersonRow), e.Action))
                End If
            End Sub

            Public Sub RemovePersonRow(ByVal row As PersonRow)
                Me.Rows.Remove(row)
            End Sub
        End Class

        <System.Diagnostics.DebuggerStepThrough()> _
        Public Class PersonRow
            Inherits DataRow

            Private tablePerson As PersonDataTable

            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tablePerson = CType(Me.Table, PersonDataTable)
            End Sub

            Public Property Id() As Long
                Get
                    Return CType(Me(Me.tablePerson.IdColumn), Long)
                End Get
                Set(ByVal value As Long)
                    Me(Me.tablePerson.IdColumn) = value
                End Set
            End Property

            Public Property FirstName() As String
                Get
                    Try
                        Return CType(Me(Me.tablePerson.FirstNameColumn), String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tablePerson.FirstNameColumn) = value
                End Set
            End Property

            Public Property LastName() As String
                Get
                    Try
                        Return CType(Me(Me.tablePerson.LastNameColumn), String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tablePerson.LastNameColumn) = value
                End Set
            End Property

            Public Function IsFirstNameNull() As Boolean
                Return Me.IsNull(Me.tablePerson.FirstNameColumn)
            End Function

            Public Sub SetFirstNameNull()
                Me(Me.tablePerson.FirstNameColumn) = System.Convert.DBNull
            End Sub

            Public Function IsLastNameNull() As Boolean
                Return Me.IsNull(Me.tablePerson.LastNameColumn)
            End Function

            Public Sub SetLastNameNull()
                Me(Me.tablePerson.LastNameColumn) = System.Convert.DBNull
            End Sub

            Public Function GetPersonAddressRows() As PersonAddressRow()
                Return CType(Me.GetChildRows(Me.Table.ChildRelations("PersonPersonAddress")), PersonAddressRow())
            End Function

            Public Function GetPhoneRows() As PhoneRow()
                Return CType(Me.GetChildRows(Me.Table.ChildRelations("PersonPhone")), PhoneRow())
            End Function
        End Class

        <System.Diagnostics.DebuggerStepThrough()> _
        Public Class PersonRowChangeEvent
            Inherits EventArgs

            Private eventRow As PersonRow

            Private eventAction As DataRowAction

            Public Sub New(ByVal row As PersonRow, ByVal action As DataRowAction)
                MyBase.New()
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            Public ReadOnly Property Row() As PersonRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            Public ReadOnly Property Action() As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class

        <System.Diagnostics.DebuggerStepThrough()> _
        Public Class AddressDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable

            Private columnId As DataColumn

            Private columnStreet As DataColumn

            Private columnCity As DataColumn

            Private columnState As DataColumn

            Private columnZip As DataColumn

            Friend Sub New()
                MyBase.New("Address")
                Me.InitClass()
            End Sub

            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub

            <System.ComponentModel.Browsable(False)> _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            Friend ReadOnly Property IdColumn() As DataColumn
                Get
                    Return Me.columnId
                End Get
            End Property

            Friend ReadOnly Property StreetColumn() As DataColumn
                Get
                    Return Me.columnStreet
                End Get
            End Property

            Friend ReadOnly Property CityColumn() As DataColumn
                Get
                    Return Me.columnCity
                End Get
            End Property

            Friend ReadOnly Property StateColumn() As DataColumn
                Get
                    Return Me.columnState
                End Get
            End Property

            Friend ReadOnly Property ZipColumn() As DataColumn
                Get
                    Return Me.columnZip
                End Get
            End Property

            Default Public ReadOnly Property Item(ByVal index As Integer) As AddressRow
                Get
                    Return CType(Me.Rows(index), AddressRow)
                End Get
            End Property

            Public Event AddressRowChanged As AddressRowChangeEventHandler

            Public Event AddressRowChanging As AddressRowChangeEventHandler

            Public Event AddressRowDeleted As AddressRowChangeEventHandler

            Public Event AddressRowDeleting As AddressRowChangeEventHandler

            Public Overloads Sub AddAddressRow(ByVal row As AddressRow)
                Me.Rows.Add(row)
            End Sub

            Public Overloads Function AddAddressRow(ByVal Id As Long, ByVal Street As String, ByVal City As String, ByVal State As String, ByVal Zip As String) As AddressRow
                Dim rowAddressRow As AddressRow = CType(Me.NewRow, AddressRow)
                rowAddressRow.ItemArray = New Object() {Id, Street, City, State, Zip}
                Me.Rows.Add(rowAddressRow)
                Return rowAddressRow
            End Function

            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function

            Public Overrides Function Clone() As DataTable
                Dim cln As AddressDataTable = CType(MyBase.Clone, AddressDataTable)
                cln.InitVars()
                Return cln
            End Function

            Protected Overrides Function CreateInstance() As DataTable
                Return New AddressDataTable
            End Function

            Friend Sub InitVars()
                Me.columnId = Me.Columns("Id")
                Me.columnStreet = Me.Columns("Street")
                Me.columnCity = Me.Columns("City")
                Me.columnState = Me.Columns("State")
                Me.columnZip = Me.Columns("Zip")
            End Sub

            Private Sub InitClass()
                Me.columnId = New DataColumn("Id", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnId)
                Me.columnStreet = New DataColumn("Street", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnStreet)
                Me.columnCity = New DataColumn("City", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnCity)
                Me.columnState = New DataColumn("State", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnState)
                Me.columnZip = New DataColumn("Zip", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnZip)
                Me.Constraints.Add(New UniqueConstraint("AddressId", New DataColumn() {Me.columnId}, False))
                Me.columnId.AllowDBNull = False
                Me.columnId.Unique = True
            End Sub

            Public Function NewAddressRow() As AddressRow
                Return CType(Me.NewRow, AddressRow)
            End Function

            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New AddressRow(builder)
            End Function

            Protected Overrides Function GetRowType() As System.Type
                Return GetType(AddressRow)
            End Function

            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.AddressRowChangedEvent) Is Nothing) Then
                    RaiseEvent AddressRowChanged(Me, New AddressRowChangeEvent(CType(e.Row, AddressRow), e.Action))
                End If
            End Sub

            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.AddressRowChangingEvent) Is Nothing) Then
                    RaiseEvent AddressRowChanging(Me, New AddressRowChangeEvent(CType(e.Row, AddressRow), e.Action))
                End If
            End Sub

            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.AddressRowDeletedEvent) Is Nothing) Then
                    RaiseEvent AddressRowDeleted(Me, New AddressRowChangeEvent(CType(e.Row, AddressRow), e.Action))
                End If
            End Sub

            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.AddressRowDeletingEvent) Is Nothing) Then
                    RaiseEvent AddressRowDeleting(Me, New AddressRowChangeEvent(CType(e.Row, AddressRow), e.Action))
                End If
            End Sub

            Public Sub RemoveAddressRow(ByVal row As AddressRow)
                Me.Rows.Remove(row)
            End Sub
        End Class

        <System.Diagnostics.DebuggerStepThrough()> _
        Public Class AddressRow
            Inherits DataRow

            Private tableAddress As AddressDataTable

            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tableAddress = CType(Me.Table, AddressDataTable)
            End Sub

            Public Property Id() As Long
                Get
                    Return CType(Me(Me.tableAddress.IdColumn), Long)
                End Get
                Set(ByVal value As Long)
                    Me(Me.tableAddress.IdColumn) = value
                End Set
            End Property

            Public Property Street() As String
                Get
                    Try
                        Return CType(Me(Me.tableAddress.StreetColumn), String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableAddress.StreetColumn) = value
                End Set
            End Property

            Public Property City() As String
                Get
                    Try
                        Return CType(Me(Me.tableAddress.CityColumn), String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableAddress.CityColumn) = value
                End Set
            End Property

            Public Property State() As String
                Get
                    Try
                        Return CType(Me(Me.tableAddress.StateColumn), String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableAddress.StateColumn) = value
                End Set
            End Property

            Public Property Zip() As String
                Get
                    Try
                        Return CType(Me(Me.tableAddress.ZipColumn), String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tableAddress.ZipColumn) = value
                End Set
            End Property

            Public Function IsStreetNull() As Boolean
                Return Me.IsNull(Me.tableAddress.StreetColumn)
            End Function

            Public Sub SetStreetNull()
                Me(Me.tableAddress.StreetColumn) = System.Convert.DBNull
            End Sub

            Public Function IsCityNull() As Boolean
                Return Me.IsNull(Me.tableAddress.CityColumn)
            End Function

            Public Sub SetCityNull()
                Me(Me.tableAddress.CityColumn) = System.Convert.DBNull
            End Sub

            Public Function IsStateNull() As Boolean
                Return Me.IsNull(Me.tableAddress.StateColumn)
            End Function

            Public Sub SetStateNull()
                Me(Me.tableAddress.StateColumn) = System.Convert.DBNull
            End Sub

            Public Function IsZipNull() As Boolean
                Return Me.IsNull(Me.tableAddress.ZipColumn)
            End Function

            Public Sub SetZipNull()
                Me(Me.tableAddress.ZipColumn) = System.Convert.DBNull
            End Sub

            Public Function GetPersonAddressRows() As PersonAddressRow()
                Return CType(Me.GetChildRows(Me.Table.ChildRelations("AddressPersonAddress")), PersonAddressRow())
            End Function
        End Class

        <System.Diagnostics.DebuggerStepThrough()> _
        Public Class AddressRowChangeEvent
            Inherits EventArgs

            Private eventRow As AddressRow

            Private eventAction As DataRowAction

            Public Sub New(ByVal row As AddressRow, ByVal action As DataRowAction)
                MyBase.New()
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            Public ReadOnly Property Row() As AddressRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            Public ReadOnly Property Action() As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class

        <System.Diagnostics.DebuggerStepThrough()> _
        Public Class PersonAddressDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable

            Private columnType As DataColumn

            Private columnPersonId As DataColumn

            Private columnAddressId As DataColumn

            Friend Sub New()
                MyBase.New("PersonAddress")
                Me.InitClass()
            End Sub

            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub

            <System.ComponentModel.Browsable(False)> _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            Friend ReadOnly Property TypeColumn() As DataColumn
                Get
                    Return Me.columnType
                End Get
            End Property

            Friend ReadOnly Property PersonIdColumn() As DataColumn
                Get
                    Return Me.columnPersonId
                End Get
            End Property

            Friend ReadOnly Property AddressIdColumn() As DataColumn
                Get
                    Return Me.columnAddressId
                End Get
            End Property

            Default Public ReadOnly Property Item(ByVal index As Integer) As PersonAddressRow
                Get
                    Return CType(Me.Rows(index), PersonAddressRow)
                End Get
            End Property

            Public Event PersonAddressRowChanged As PersonAddressRowChangeEventHandler

            Public Event PersonAddressRowChanging As PersonAddressRowChangeEventHandler

            Public Event PersonAddressRowDeleted As PersonAddressRowChangeEventHandler

            Public Event PersonAddressRowDeleting As PersonAddressRowChangeEventHandler

            Public Overloads Sub AddPersonAddressRow(ByVal row As PersonAddressRow)
                Me.Rows.Add(row)
            End Sub

            Public Overloads Function AddPersonAddressRow(ByVal Type As String, ByVal parentPersonRowByPersonPersonAddress As PersonRow, ByVal parentAddressRowByAddressPersonAddress As AddressRow) As PersonAddressRow
                Dim rowPersonAddressRow As PersonAddressRow = CType(Me.NewRow, PersonAddressRow)
                rowPersonAddressRow.ItemArray = New Object() {Type, parentPersonRowByPersonPersonAddress(0), parentAddressRowByAddressPersonAddress(0)}
                Me.Rows.Add(rowPersonAddressRow)
                Return rowPersonAddressRow
            End Function

            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function

            Public Overrides Function Clone() As DataTable
                Dim cln As PersonAddressDataTable = CType(MyBase.Clone, PersonAddressDataTable)
                cln.InitVars()
                Return cln
            End Function

            Protected Overrides Function CreateInstance() As DataTable
                Return New PersonAddressDataTable
            End Function

            Friend Sub InitVars()
                Me.columnType = Me.Columns("Type")
                Me.columnPersonId = Me.Columns("PersonId")
                Me.columnAddressId = Me.Columns("AddressId")
            End Sub

            Private Sub InitClass()
                Me.columnType = New DataColumn("Type", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnType)
                Me.columnPersonId = New DataColumn("PersonId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnPersonId)
                Me.columnAddressId = New DataColumn("AddressId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnAddressId)
            End Sub

            Public Function NewPersonAddressRow() As PersonAddressRow
                Return CType(Me.NewRow, PersonAddressRow)
            End Function

            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New PersonAddressRow(builder)
            End Function

            Protected Overrides Function GetRowType() As System.Type
                Return GetType(PersonAddressRow)
            End Function

            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.PersonAddressRowChangedEvent) Is Nothing) Then
                    RaiseEvent PersonAddressRowChanged(Me, New PersonAddressRowChangeEvent(CType(e.Row, PersonAddressRow), e.Action))
                End If
            End Sub

            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.PersonAddressRowChangingEvent) Is Nothing) Then
                    RaiseEvent PersonAddressRowChanging(Me, New PersonAddressRowChangeEvent(CType(e.Row, PersonAddressRow), e.Action))
                End If
            End Sub

            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.PersonAddressRowDeletedEvent) Is Nothing) Then
                    RaiseEvent PersonAddressRowDeleted(Me, New PersonAddressRowChangeEvent(CType(e.Row, PersonAddressRow), e.Action))
                End If
            End Sub

            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.PersonAddressRowDeletingEvent) Is Nothing) Then
                    RaiseEvent PersonAddressRowDeleting(Me, New PersonAddressRowChangeEvent(CType(e.Row, PersonAddressRow), e.Action))
                End If
            End Sub

            Public Sub RemovePersonAddressRow(ByVal row As PersonAddressRow)
                Me.Rows.Remove(row)
            End Sub
        End Class

        <System.Diagnostics.DebuggerStepThrough()> _
        Public Class PersonAddressRow
            Inherits DataRow

            Private tablePersonAddress As PersonAddressDataTable

            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tablePersonAddress = CType(Me.Table, PersonAddressDataTable)
            End Sub

            Public Property Type() As String
                Get
                    Try
                        Return CType(Me(Me.tablePersonAddress.TypeColumn), String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tablePersonAddress.TypeColumn) = value
                End Set
            End Property

            Public Property PersonId() As Long
                Get
                    Try
                        Return CType(Me(Me.tablePersonAddress.PersonIdColumn), Long)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As Long)
                    Me(Me.tablePersonAddress.PersonIdColumn) = value
                End Set
            End Property

            Public Property AddressId() As Long
                Get
                    Try
                        Return CType(Me(Me.tablePersonAddress.AddressIdColumn), Long)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As Long)
                    Me(Me.tablePersonAddress.AddressIdColumn) = value
                End Set
            End Property

            Public Property PersonRow() As PersonRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("PersonPersonAddress")), PersonRow)
                End Get
                Set(ByVal value As PersonRow)
                    Me.SetParentRow(value, Me.Table.ParentRelations("PersonPersonAddress"))
                End Set
            End Property

            Public Property AddressRow() As AddressRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("AddressPersonAddress")), AddressRow)
                End Get
                Set(ByVal value As AddressRow)
                    Me.SetParentRow(value, Me.Table.ParentRelations("AddressPersonAddress"))
                End Set
            End Property

            Public Function IsTypeNull() As Boolean
                Return Me.IsNull(Me.tablePersonAddress.TypeColumn)
            End Function

            Public Sub SetTypeNull()
                Me(Me.tablePersonAddress.TypeColumn) = System.Convert.DBNull
            End Sub

            Public Function IsPersonIdNull() As Boolean
                Return Me.IsNull(Me.tablePersonAddress.PersonIdColumn)
            End Function

            Public Sub SetPersonIdNull()
                Me(Me.tablePersonAddress.PersonIdColumn) = System.Convert.DBNull
            End Sub

            Public Function IsAddressIdNull() As Boolean
                Return Me.IsNull(Me.tablePersonAddress.AddressIdColumn)
            End Function

            Public Sub SetAddressIdNull()
                Me(Me.tablePersonAddress.AddressIdColumn) = System.Convert.DBNull
            End Sub
        End Class

        <System.Diagnostics.DebuggerStepThrough()> _
        Public Class PersonAddressRowChangeEvent
            Inherits EventArgs

            Private eventRow As PersonAddressRow

            Private eventAction As DataRowAction

            Public Sub New(ByVal row As PersonAddressRow, ByVal action As DataRowAction)
                MyBase.New()
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            Public ReadOnly Property Row() As PersonAddressRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            Public ReadOnly Property Action() As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class

        <System.Diagnostics.DebuggerStepThrough()> _
        Public Class PhoneDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable

            Private columnPersonId As DataColumn

            Private columnAreaCode As DataColumn

            Private columnPhoneNumber As DataColumn

            Friend Sub New()
                MyBase.New("Phone")
                Me.InitClass()
            End Sub

            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub

            <System.ComponentModel.Browsable(False)> _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            Friend ReadOnly Property PersonIdColumn() As DataColumn
                Get
                    Return Me.columnPersonId
                End Get
            End Property

            Friend ReadOnly Property AreaCodeColumn() As DataColumn
                Get
                    Return Me.columnAreaCode
                End Get
            End Property

            Friend ReadOnly Property PhoneNumberColumn() As DataColumn
                Get
                    Return Me.columnPhoneNumber
                End Get
            End Property

            Default Public ReadOnly Property Item(ByVal index As Integer) As PhoneRow
                Get
                    Return CType(Me.Rows(index), PhoneRow)
                End Get
            End Property

            Public Event PhoneRowChanged As PhoneRowChangeEventHandler

            Public Event PhoneRowChanging As PhoneRowChangeEventHandler

            Public Event PhoneRowDeleted As PhoneRowChangeEventHandler

            Public Event PhoneRowDeleting As PhoneRowChangeEventHandler

            Public Overloads Sub AddPhoneRow(ByVal row As PhoneRow)
                Me.Rows.Add(row)
            End Sub

            Public Overloads Function AddPhoneRow(ByVal parentPersonRowByPersonPhone As PersonRow, ByVal AreaCode As String, ByVal PhoneNumber As String) As PhoneRow
                Dim rowPhoneRow As PhoneRow = CType(Me.NewRow, PhoneRow)
                rowPhoneRow.ItemArray = New Object() {parentPersonRowByPersonPhone(0), AreaCode, PhoneNumber}
                Me.Rows.Add(rowPhoneRow)
                Return rowPhoneRow
            End Function

            Public Function FindByPersonId(ByVal PersonId As Long) As PhoneRow
                Return CType(Me.Rows.Find(New Object() {PersonId}), PhoneRow)
            End Function

            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function

            Public Overrides Function Clone() As DataTable
                Dim cln As PhoneDataTable = CType(MyBase.Clone, PhoneDataTable)
                cln.InitVars()
                Return cln
            End Function

            Protected Overrides Function CreateInstance() As DataTable
                Return New PhoneDataTable
            End Function

            Friend Sub InitVars()
                Me.columnPersonId = Me.Columns("PersonId")
                Me.columnAreaCode = Me.Columns("AreaCode")
                Me.columnPhoneNumber = Me.Columns("PhoneNumber")
            End Sub

            Private Sub InitClass()
                Me.columnPersonId = New DataColumn("PersonId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnPersonId)
                Me.columnAreaCode = New DataColumn("AreaCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnAreaCode)
                Me.columnPhoneNumber = New DataColumn("PhoneNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnPhoneNumber)
                Me.Constraints.Add(New UniqueConstraint("PhoneKey", New DataColumn() {Me.columnPersonId}, True))
                Me.columnPersonId.AllowDBNull = False
                Me.columnPersonId.Unique = True
            End Sub

            Public Function NewPhoneRow() As PhoneRow
                Return CType(Me.NewRow, PhoneRow)
            End Function

            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New PhoneRow(builder)
            End Function

            Protected Overrides Function GetRowType() As System.Type
                Return GetType(PhoneRow)
            End Function

            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.PhoneRowChangedEvent) Is Nothing) Then
                    RaiseEvent PhoneRowChanged(Me, New PhoneRowChangeEvent(CType(e.Row, PhoneRow), e.Action))
                End If
            End Sub

            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.PhoneRowChangingEvent) Is Nothing) Then
                    RaiseEvent PhoneRowChanging(Me, New PhoneRowChangeEvent(CType(e.Row, PhoneRow), e.Action))
                End If
            End Sub

            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.PhoneRowDeletedEvent) Is Nothing) Then
                    RaiseEvent PhoneRowDeleted(Me, New PhoneRowChangeEvent(CType(e.Row, PhoneRow), e.Action))
                End If
            End Sub

            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.PhoneRowDeletingEvent) Is Nothing) Then
                    RaiseEvent PhoneRowDeleting(Me, New PhoneRowChangeEvent(CType(e.Row, PhoneRow), e.Action))
                End If
            End Sub

            Public Sub RemovePhoneRow(ByVal row As PhoneRow)
                Me.Rows.Remove(row)
            End Sub
        End Class

        <System.Diagnostics.DebuggerStepThrough()> _
        Public Class PhoneRow
            Inherits DataRow

            Private tablePhone As PhoneDataTable

            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tablePhone = CType(Me.Table, PhoneDataTable)
            End Sub

            Public Property PersonId() As Long
                Get
                    Return CType(Me(Me.tablePhone.PersonIdColumn), Long)
                End Get
                Set(ByVal value As Long)
                    Me(Me.tablePhone.PersonIdColumn) = value
                End Set
            End Property

            Public Property AreaCode() As String
                Get
                    Try
                        Return CType(Me(Me.tablePhone.AreaCodeColumn), String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tablePhone.AreaCodeColumn) = value
                End Set
            End Property

            Public Property PhoneNumber() As String
                Get
                    Try
                        Return CType(Me(Me.tablePhone.PhoneNumberColumn), String)
                    Catch e As InvalidCastException
                        Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                    End Try
                End Get
                Set(ByVal value As String)
                    Me(Me.tablePhone.PhoneNumberColumn) = value
                End Set
            End Property

            Public Property PersonRow() As PersonRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("PersonPhone")), PersonRow)
                End Get
                Set(ByVal value As PersonRow)
                    Me.SetParentRow(value, Me.Table.ParentRelations("PersonPhone"))
                End Set
            End Property

            Public Function IsAreaCodeNull() As Boolean
                Return Me.IsNull(Me.tablePhone.AreaCodeColumn)
            End Function

            Public Sub SetAreaCodeNull()
                Me(Me.tablePhone.AreaCodeColumn) = System.Convert.DBNull
            End Sub

            Public Function IsPhoneNumberNull() As Boolean
                Return Me.IsNull(Me.tablePhone.PhoneNumberColumn)
            End Function

            Public Sub SetPhoneNumberNull()
                Me(Me.tablePhone.PhoneNumberColumn) = System.Convert.DBNull
            End Sub
        End Class

        <System.Diagnostics.DebuggerStepThrough()> _
        Public Class PhoneRowChangeEvent
            Inherits EventArgs

            Private eventRow As PhoneRow

            Private eventAction As DataRowAction

            Public Sub New(ByVal row As PhoneRow, ByVal action As DataRowAction)
                MyBase.New()
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            Public ReadOnly Property Row() As PhoneRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            Public ReadOnly Property Action() As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End Namespace