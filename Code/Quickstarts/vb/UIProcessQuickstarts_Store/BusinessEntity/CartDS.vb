'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class CartDS
    Inherits DataSet
    
    Private tableCarts As CartsDataTable
    
    Private tableCartItems As CartItemsDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("cart")) Is Nothing) Then
                Me.Tables.Add(New CartsDataTable(ds.Tables("cart")))
            End If
            If (Not (ds.Tables("cart_details")) Is Nothing) Then
                Me.Tables.Add(New CartItemsDataTable(ds.Tables("cart_details")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Carts As CartsDataTable
        Get
            Return Me.tableCarts
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CartItems As CartItemsDataTable
        Get
            Return Me.tableCartItems
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As CartDS = CType(MyBase.Clone,CartDS)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("cart")) Is Nothing) Then
            Me.Tables.Add(New CartsDataTable(ds.Tables("cart")))
        End If
        If (Not (ds.Tables("cart_details")) Is Nothing) Then
            Me.Tables.Add(New CartItemsDataTable(ds.Tables("cart_details")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableCarts = CType(Me.Tables("cart"),CartsDataTable)
        If (Not (Me.tableCarts) Is Nothing) Then
            Me.tableCarts.InitVars
        End If
        Me.tableCartItems = CType(Me.Tables("cart_details"),CartItemsDataTable)
        If (Not (Me.tableCartItems) Is Nothing) Then
            Me.tableCartItems.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "CartDS"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/CartDS.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCarts = New CartsDataTable
        Me.Tables.Add(Me.tableCarts)
        Me.tableCartItems = New CartItemsDataTable
        Me.Tables.Add(Me.tableCartItems)
    End Sub
    
    Private Function ShouldSerializeCarts() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCartItems() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub CartChangeEventHandler(ByVal sender As Object, ByVal e As CartChangeEvent)
    
    Public Delegate Sub CartItemChangeEventHandler(ByVal sender As Object, ByVal e As CartItemChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CartsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCustomerId As DataColumn
        
        Private columnTaskId As DataColumn
        
        Friend Sub New()
            MyBase.New("cart")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CustomerIdColumn As DataColumn
            Get
                Return Me.columnCustomerId
            End Get
        End Property
        
        Friend ReadOnly Property TaskIdColumn As DataColumn
            Get
                Return Me.columnTaskId
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Cart
            Get
                Return CType(Me.Rows(index),Cart)
            End Get
        End Property
        
        Public Event CartChanged As CartChangeEventHandler
        
        Public Event CartChanging As CartChangeEventHandler
        
        Public Event CartDeleted As CartChangeEventHandler
        
        Public Event CartDeleting As CartChangeEventHandler
        
        Public Overloads Sub AddCart(ByVal row As Cart)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCart(ByVal CustomerId As Integer, ByVal TaskId As System.Guid) As Cart
            Dim rowCart As Cart = CType(Me.NewRow,Cart)
            rowCart.ItemArray = New Object() {CustomerId, TaskId}
            Me.Rows.Add(rowCart)
            Return rowCart
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CartsDataTable = CType(MyBase.Clone,CartsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CartsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCustomerId = Me.Columns("CustomerID")
            Me.columnTaskId = Me.Columns("TaskID")
        End Sub
        
        Private Sub InitClass()
            Me.columnCustomerId = New DataColumn("CustomerID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerId)
            Me.columnTaskId = New DataColumn("TaskID", GetType(System.Guid), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTaskId)
            Me.columnCustomerId.AllowDBNull = false
            Me.columnTaskId.AllowDBNull = false
        End Sub
        
        Public Function NewCart() As Cart
            Return CType(Me.NewRow,Cart)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Cart(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Cart)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CartChangedEvent) Is Nothing) Then
                RaiseEvent CartChanged(Me, New CartChangeEvent(CType(e.Row,Cart), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CartChangingEvent) Is Nothing) Then
                RaiseEvent CartChanging(Me, New CartChangeEvent(CType(e.Row,Cart), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CartDeletedEvent) Is Nothing) Then
                RaiseEvent CartDeleted(Me, New CartChangeEvent(CType(e.Row,Cart), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CartDeletingEvent) Is Nothing) Then
                RaiseEvent CartDeleting(Me, New CartChangeEvent(CType(e.Row,Cart), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCart(ByVal row As Cart)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Cart
        Inherits DataRow
        
        Private tableCarts As CartsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCarts = CType(Me.Table,CartsDataTable)
        End Sub
        
        Public Property CustomerId As Integer
            Get
                Return CType(Me(Me.tableCarts.CustomerIdColumn),Integer)
            End Get
            Set
                Me(Me.tableCarts.CustomerIdColumn) = value
            End Set
        End Property
        
        Public Property TaskId As System.Guid
            Get
                Return CType(Me(Me.tableCarts.TaskIdColumn),System.Guid)
            End Get
            Set
                Me(Me.tableCarts.TaskIdColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CartChangeEvent
        Inherits EventArgs
        
        Private eventRow As Cart
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Cart, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Cart
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CartItemsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnQuantity As DataColumn
        
        Private columnProductId As DataColumn
        
        Private columnModelName As DataColumn
        
        Private columnUnitCost As DataColumn
        
        Friend Sub New()
            MyBase.New("cart_details")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property QuantityColumn As DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        Friend ReadOnly Property ProductIdColumn As DataColumn
            Get
                Return Me.columnProductId
            End Get
        End Property
        
        Friend ReadOnly Property ModelNameColumn As DataColumn
            Get
                Return Me.columnModelName
            End Get
        End Property
        
        Friend ReadOnly Property UnitCostColumn As DataColumn
            Get
                Return Me.columnUnitCost
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CartItem
            Get
                Return CType(Me.Rows(index),CartItem)
            End Get
        End Property
        
        Public Event CartItemChanged As CartItemChangeEventHandler
        
        Public Event CartItemChanging As CartItemChangeEventHandler
        
        Public Event CartItemDeleted As CartItemChangeEventHandler
        
        Public Event CartItemDeleting As CartItemChangeEventHandler
        
        Public Overloads Sub AddCartItem(ByVal row As CartItem)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCartItem(ByVal Quantity As Integer, ByVal ProductId As Integer, ByVal ModelName As String, ByVal UnitCost As Decimal) As CartItem
            Dim rowCartItem As CartItem = CType(Me.NewRow,CartItem)
            rowCartItem.ItemArray = New Object() {Quantity, ProductId, ModelName, UnitCost}
            Me.Rows.Add(rowCartItem)
            Return rowCartItem
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CartItemsDataTable = CType(MyBase.Clone,CartItemsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CartItemsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnQuantity = Me.Columns("Quantity")
            Me.columnProductId = Me.Columns("ProductID")
            Me.columnModelName = Me.Columns("ModelName")
            Me.columnUnitCost = Me.Columns("UnitCost")
        End Sub
        
        Private Sub InitClass()
            Me.columnQuantity = New DataColumn("Quantity", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuantity)
            Me.columnProductId = New DataColumn("ProductID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProductId)
            Me.columnModelName = New DataColumn("ModelName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnModelName)
            Me.columnUnitCost = New DataColumn("UnitCost", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUnitCost)
            Me.columnQuantity.AllowDBNull = false
            Me.columnProductId.AllowDBNull = false
            Me.columnModelName.AllowDBNull = false
            Me.columnUnitCost.AllowDBNull = false
        End Sub
        
        Public Function NewCartItem() As CartItem
            Return CType(Me.NewRow,CartItem)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CartItem(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CartItem)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CartItemChangedEvent) Is Nothing) Then
                RaiseEvent CartItemChanged(Me, New CartItemChangeEvent(CType(e.Row,CartItem), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CartItemChangingEvent) Is Nothing) Then
                RaiseEvent CartItemChanging(Me, New CartItemChangeEvent(CType(e.Row,CartItem), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CartItemDeletedEvent) Is Nothing) Then
                RaiseEvent CartItemDeleted(Me, New CartItemChangeEvent(CType(e.Row,CartItem), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CartItemDeletingEvent) Is Nothing) Then
                RaiseEvent CartItemDeleting(Me, New CartItemChangeEvent(CType(e.Row,CartItem), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCartItem(ByVal row As CartItem)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CartItem
        Inherits DataRow
        
        Private tableCartItems As CartItemsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCartItems = CType(Me.Table,CartItemsDataTable)
        End Sub
        
        Public Property Quantity As Integer
            Get
                Return CType(Me(Me.tableCartItems.QuantityColumn),Integer)
            End Get
            Set
                Me(Me.tableCartItems.QuantityColumn) = value
            End Set
        End Property
        
        Public Property ProductId As Integer
            Get
                Return CType(Me(Me.tableCartItems.ProductIdColumn),Integer)
            End Get
            Set
                Me(Me.tableCartItems.ProductIdColumn) = value
            End Set
        End Property
        
        Public Property ModelName As String
            Get
                Return CType(Me(Me.tableCartItems.ModelNameColumn),String)
            End Get
            Set
                Me(Me.tableCartItems.ModelNameColumn) = value
            End Set
        End Property
        
        Public Property UnitCost As Decimal
            Get
                Return CType(Me(Me.tableCartItems.UnitCostColumn),Decimal)
            End Get
            Set
                Me(Me.tableCartItems.UnitCostColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CartItemChangeEvent
        Inherits EventArgs
        
        Private eventRow As CartItem
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CartItem, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CartItem
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
